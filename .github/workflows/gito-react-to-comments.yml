name: "Gito: React to GitHub comment"

on:
  issue_comment:
    types: [created]

permissions:
  contents: write  # to make PR
  issues: write
  pull-requests: write
  # read: to download the code review artifact
  # write: to trigger other actions
  actions: write

jobs:
  process-comment:
    if: |
      github.event.issue.pull_request &&
      (
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'
      ) &&
      (
        startsWith(github.event.comment.body, '/') ||
        startsWith(github.event.comment.body, 'gito') ||
        startsWith(github.event.comment.body, 'ai') ||
        startsWith(github.event.comment.body, 'bot') ||
        contains(github.event.comment.body, '@gito') ||
        contains(github.event.comment.body, '@ai') ||
        contains(github.event.comment.body, '@bot')
      )
    runs-on: ubuntu-latest

    steps:
    - name: Get PR details
      id: pr
      uses: actions/github-script@v7
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          return {
            head_ref: pr.data.head.ref,
            head_sha: pr.data.head.sha,
            base_ref: pr.data.base.ref
          };

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ fromJson(steps.pr.outputs.result).head_ref }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with: { python-version: "3.13" }

    - name: Fetch Latest Gito Version
      id: gito-version
      run: pip index versions gito.bot 2>/dev/null | head -1 | sed -n 's/.* (\([^)]*\)).*/version=\1/p' >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      id: cache
      with:
        path: |
          ${{ env.pythonLocation }}/lib/python3.13/site-packages
          ${{ env.pythonLocation }}/bin
        key: gito_v${{ steps.gito-version.outputs.version }}

    - name: Install Gito
      if: steps.cache.outputs.cache-hit != 'true'
      run: pip install gito.bot~=2.0

    - name: Run Gito react
      env:
        # LLM config is needed only if answer_github_comments = true in .gito/config.toml
        # Otherwise, use LLM_API_TYPE: none
        LLM_API_TYPE: anthropic
        LLM_API_KEY: ${{ secrets.ANTHROPIC_API_KEY}}
        MODEL: "claude-opus-4-20250514"
        JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
        JIRA_URL: ${{ secrets.JIRA_URL }}
        JIRA_USER: ${{ secrets.JIRA_USER }}
        LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
      run: |
        gito react-to-comment ${{ github.event.comment.id }} --token ${{ secrets.GITHUB_TOKEN }}